To create the files for the Berry connections

1. Run the program gerarwfc.py **************************************************************

 Depends on: dft.py readwfck2r.py contatempo.py extractwfc.x
 Needs edit: dft.py,wfck2r -> prefix of dft calculation

 It will run DFT scf calculations on directory dft (if they weren't ran yet).
 Then it will define the set of k-points to be sampled, and run the corresponding nscf calculation (if they weren't ran yet).
 Then it will extract the wavefunctions to file wfck2r.mat and create a small version wfcdata.dat.

 Also creates files in directory wfc:
  k_points
  eigenvalues
  kindex
  occupancies


 It will then run extractwfc.x .
 This program will read the wavefunctions produced by Quantum Espresso and return the same wavefunctions in a different format, ready to be read by other programs.
 It will read file wfck2r.mat.
 It will produce a set of files in directory wfc with names k000$b000%.wfc where $ is the number of the k point and % is the number of the band.
 The wavefunctions thus saved have a consistent phase, and are renormalized to make \Sum |psi|^2 = 1

 This file contains in the first three columns coordinates in real space in a weird format.
 x and y coordinates are calculated assuming a particular hexagonal system, and are normalized to the lattice parameter.
 z coordinate is simply the number of points in that direction.
 This is like that because the actual size of the lattice is not in file wfck2r.mat, and it should be read from somewhere else to be included.

1a. Run program rindex.py to create file rindex **************************************************************

2. Run the program connections.x **************************************************************

 This program reads all wavefunction files and compares each k point (all bands) to each one of the four surrounding k points (all bands) and selects the cases where the modulus of the dot product of each pair of functions is larger than a determined value.
 Creates a file connections for |<psi|phi>| > 0.9
 (Creates a file connections1 for |<psi|phi>| > 0.85)
 Creates a file connections2 for |<psi|phi>| > 0.8
 Values may be changed.

 Creates a file neighbors with a list of valid k points that suround a given point.
 Also creates a file connections.dat with some data for future use.


3. Run program compara.x **************************************************************

 This program reads a file points.dat with a list of k points that have exactly the same band order, and will be used as starting points.
 These k points can be choosen using the toll find_sym.x, which gives a list of k points with the same symmetry (found by comparing eigenvalues) of a given point.

 Creates the file apontador, which indicates to which band a certain eigenvalue/eigenvector belongs.
 And the fourth column says the 'quality' of the choice: 3 needs further study, more means an interpolation (or extrapolation) has to be done.

4. Run interpolation.x **************************************************************

 This program reads the file apontador, finds the problematic cases and makes an interpolation of the wavefunctions.
 Needs files apontador, neighbors and connections.dat in the same directory.

5. Run bands.py **************************************************************

 This program converts app dictionary to ban dictionary.
 Creates file bandas in wfc directory.

6. Run r2k.py **************************************************************

 This program reads a set of wavefunctions of for different k and bands and translates that to another set for different points in real space, the functions become a function of k instead of r
 Then it calculates the gradient in k for each band.
 Then it saves the wavefunctions and gradients in a convenient format for each band in files wfcpos1.gz and wfcgra1.gz, respectively.
 The number 1 is for band 1, other bands have different numbers.

 Needs program load.py and auxiliary.py.
 Needs number of bands to be considered.

7. Run program berry.py bandwfc gradwfc **************************************************************

 Where bandwfc is the first index (band number) and gradwfc is the second index of the bery connection
 To run a set of indices, its better to create a bash script and run in parallel.

 To visualize run py drawberry.py band1 band2 (a,r,i)
 Needs 3 arguments: the two bands between which the berry connection is calculated and a letter indicating real part (r), imaginary part (i) or both and more (a).

8. To calculate the optical conductivity, there is the program condutividade.py. **************************************************************

 Needs 2 arguments: the first is the last filled band, the second is last empty band.
 If the first argument is negative, it will only consider transitions from one band to the other, while if it is positive it will consider all bands below the first value and all the empty bands up to the second value.
 Real part has to be always positive and zero below the gap.

9. To calculate the second order conductivity for second harmonic generation, there the program shg.py **************************************************************

 Needs 2 arguments: the first is the last filled band, the second is last empty band.
 If the first argument is negative, it will only consider transitions from one band to the other, while if it is positive it will consider all bands below the first value and all the empty bands up to the second value.

 Needs program comutator.py.


