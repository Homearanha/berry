** This is the workflow for the berry suite of programs **

* The python files that are included in the suite BERRY:
 berry.py
 compara.py
 comutator.py
 condutivity.py
 contatempo.py
 dft.py
 dotproduct.py
 draw2D_corrected.py
 draw2D_machine.py
 drawberry.py
 generatewfc.py
 headerfooter.py
 interpolation.py
 loaddata.py
 parser.py
 preprocessing.py
 r2k.py
 shg.py

* The sequence of programs to run should be the following:
 preprocessing.py   inputfile
 generatewfc.py
 dotproduct.py
 compara.py
 interpolation.py
 r2k.py  b1 [b2]
 berry.py   bandwfc gradwfc
 condutivity.py   b1 b2 [file]
 shg.py   b1 b2 [file]

* The programs for visualisation of results are:
 draw2D_corrected.py
 draw2D_machine.py
 drawberry.py

* Auxiliary programs:
 comutator.py
 contatempo.py
 dft.py
 headerfooter.py
 loaddata.py
 parser.py

* More detailed explanation

1) First a preprocessing program prepares data for further calculations (preprocessing.py)

 - scf calculation has to be done with the dft software (we will use Quantum ESPRESSO for now: needs to be in the PATH)
 - in the working directory, one needs to create a directory called 'dft' and copy to that directory the QE input file for an scf calculation and the pseudopotentials files.
 - An input file for the berry run has to be created in the running directory with several parameters defined.
	minimum parameters:
		origin of k-points
		number of k-points in each direction
		step of the k-points
		number of bands
 - Example:
  k0 0.00 0.00 0.00
  nkx 100
  nky 100
  nkz 1
  step 0.005
  nbnd 8

 - with this data, the program preprocessing.py should prepare and run scf and nscf calculations.

 - After running nscf calculation, the program preprocessing.py reads the main output file and gathers data from the calculation that will be used latter, and saves it to formated files.
	Data needed to gather and save:
		*lattice dimensions
		*reciprocal lattice dimensions
		lattice vectors
		reciprocal lattice vectors
		ordered eigenvalues
		ordered list of k-points
		ordered list of occupations
		*ordered list of real space points
		total number of k-points
		number of k-points in each direction
		total number of real space points
		number of real space points in each direction

	Files creates:
		phase.npy
		neighbors.npy
		eigenvalues.npy
		occupations.npy
		positions.npy
		kpoints.npy
		datafile.npy (This is the main data file; see code for what and how data is saved)
                nktoijl.npy
                ijltonk.npy

 - Generates and saves:
		list of neighbors of each k-point (which neighbors to consider may be an input parameter)
		for each (k,r) the phase factor of the Bloch functions
	This finishes the preparatory phase.



2) Make wavefunctions coherent (generatewfc.py)

 - read wavefunctions in real space
 - choose a low symmetry point in real space and apply a phase to all wave functions so that the phase in that point is set to zero
 - save all wavefunctions

 - simply run generatewfc.py
	it will use dft.py , which then call QE program wfck2r.x to generate wfc in real space



3) Calculate the dot product of each wavefunction's Bloch factor of a k-point with each wavefunction's Bloch factor of the neighboring k-points.
 - This means wavefunctions have to be multiplied by e^{-ik.r} in each point r.

 - The python script dotproduct.py runs through wfc directory where the wavefunctions are stored

 - In the end we get two files dpc.dat and dp.dat
	dpc.dat contains for each pair of k-points and bands the dot product of the wavefunctions
	dp.dat contains the modulus of dpc.dat
	The files are formated as:
		kp	neighbor(0-3)	band	band1	dot product-complex number (or modulus)



4) Find which eigenvalues/eigenfunctions have continuity, by running program compara.py .
 - This program reads the dot product files dp.dat and dpc.dat and uses the first to check continuity.

 - It creates two files (bandsfinal.npy and signalfinal.npy)
	The first stores an array bandsfinal[nks,nbnd] = number of band that is continuous to band in nbnd
	The second signalfinal[nks,nbnd] equals -1 if there is an inconsistency at that k-point or a number >=0
		giving the number of times it found a continuity. The larger the value, the better.

- compara.py may need to be run several times until the results are good.




5) There may be a few points that are actual discontinuities and so need an interpolation.
 - For this, interpolation.py should be run.
 - It will create new interpolated wavefunctions with extension .wfc1




6) With the bands right, now proceeds to calculate the wavefunctions in k-space and their gradients.
 - For that, run r2k.py with one or two arguments
	If one, will calculate from band 0 to the value inputed.
	If two, will calculate for the set of bands between the two values, inclusive.

 - Will save the wavefunctions of each band in a compressed file wfcpos#.gz where # = number of band
 - Will save the gradients of each band in a compressed file wfcgra.gz where # = number of band




7) Calculte the Berry connections: berry.py bandwfc gradwfc **************************************************************

 Where bandwfc is the first index (band number) and gradwfc is the second index of the bery connection
 To run a set of indices, its better to create a bash script and run in parallel.




8) Calculate the linear condutivity by running condutivity.py .
 - Needs two or three arguments.
 - If there are two:  the first is the last filled band, the second is last empty band.
 If the first argument is negative, it will only consider transitions from one band to the other, while if it is positive it will consider all bands below the first value and all the empty bands up to the second value.
 Real part has to be always positive and zero below the gap.
 - The third argument, if it exists, is the name of an input file that should have the values wanted for
 enermax  2.5            # Maximum energy (Ry)
 enerstep  0.001         # Energy step (Ry)
 broadning  0.01j        # energy broadning (Ry) 
(these are the default values, if there is no input file)




9) Calculate the second harmonic condutivity by running shg.py
 - Needs two or three arguments.
 - If there are two:  the first is the last filled band, the second is last empty band.
 If the first argument is negative, it will only consider transitions from one band to the other, while if it is positive it will consider all bands below the first value and all the empty bands up to the second value.
 Real part has to be always positive and zero below the gap.
 - The third argument, if it exists, is the name of an input file that should have the values wanted for
 enermax  2.5            # Maximum energy (Ry)
 enerstep  0.001         # Energy step (Ry)
 broadning  0.01j        # energy broadning (Ry)
(these are the default values, if there is no input file)

 Needs program comutator.py.























